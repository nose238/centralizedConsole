#!/usr/bin/env python
#Eduardo Marquez
#before executing this code it MUST exist: 
#1. sshpass MUST be installed on terminal ***sudo apt-get install sshpass*** 

##################Importing libraries#####################
import time
import commands
import os
from daemon import runner
###########Daemonization part starts######################
class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/tmp/foo.pid'
        self.pidfile_timeout = 5
    def run(self):
###########Daemonization part ends########################
#---------------------MAIN-------------------------------#        
        while True:
            ##########read Client data
            ipList = open("/home/software/scriptsSoporte/centosFiles/ipList.txt", "r")
            txt_ip_no_SSH = open("/home/software/scriptsSoporte/centosFiles/ipListNoSSH.txt", "w")  
            txt_ip_no_SSH.write("")
            i = 1
            for line in ipList:
                temp = 0 #used to eliminate the last character in strings
                txt = open("/home/software/scriptsSoporte/centosFiles/userClient.txt", "r")
                userClient = txt.read()
                temp = len(userClient)
                userClient = userClient[:temp-1]
                txt.close()
                temp = len(line)
                clientIP = line[:temp-1]
                txt = open("/home/software/scriptsSoporte/centosFiles/portClient.txt", "r")
                portClient = txt.read()
                temp = len(portClient)
                portClient = portClient[:temp-1]
                txt.close()
                txt = open("/home/software/scriptsSoporte/centosFiles/pswClient.txt", "r")
                pswClient = txt.read()
                temp = len(pswClient)
                pswClient = pswClient[:temp-1]
                txt.close()
                ###print clients information
                print(str(i) + ": " + userClient + "@" + clientIP + "______PSW:"  + pswClient + "__PORT:" + portClient )
                i += 1 
                txt_ip_no_SSH = open("/home/software/scriptsSoporte/centosFiles/ipListNoSSH.txt", "a")  
                user = commands.getoutput("whoami")       # Server's User
                txtStatus = open("/home/software/scriptsSoporte/centosFiles/sshStatus.txt", "w") #change to correct path
                status = commands.getstatusoutput("sshpass -p '' ssh -o 'KbdInteractiveDevices no' " 
                    + userClient + "@" + clientIP + " -p " + portClient) #it verifies if public key is on the Server  
                print("vvvvvvvvvvvvvvvvvvvvvvv")
                print(status)
                print("***********************")

                if status[0] == 0: # return 0 whit no errors. Public key on in the Server
                    print("Key found")
                    txtStatus.write("0")
                elif status[0] == 1280: #Error server found but password does not match... somehow key is not on the Server
                    txt_ip_no_SSH.write(clientIP + "\n")
                    print("Key not found... Trying to copy public key")
                    #has public key been generated by client?
                    txtStatus.write("1")
                    key_status = commands.getoutput(" if [ -f /keys/.ssh/id_rsa_"+userClient+"_"+clientIP+" ]; \
                        then echo 'Key found... trying to copy to the client' ; \
                        else ssh-keygen -t rsa -f /keys/.ssh/id_rsa_"+userClient+"_"+clientIP+" -q -P '' ; \
                        echo 'Key generated... Trying to copy to the client' ;  fi  ")
                    #if public key doesn't exist this line creates it 
                    key_status = commands.getoutput("sshpass -p '"+pswClient+"' ssh-copy-id \
                        -o 'KbdInteractiveDevices no' "+userClient+"@"+clientIP+" -p "+portClient) 
                else: #any other error
                    print("Server not found")
                    txtStatus.write("2")
                    txt_ip_no_SSH.write(clientIP + "\n")
                txt_ip_no_SSH.close()       
            time.sleep(5)
#---------------------MAIN-------------------------------#        
###########Daemonization part starts######################
app = App()
daemon_runner = runner.DaemonRunner(app)
daemon_runner.do_action()
###########Daemonization part ends########################